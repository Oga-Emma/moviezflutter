// Mocks generated by Mockito 5.2.0 from annotations
// in moviezflutter/test/repository/movie_repo_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:moviezflutter/data/dto/movie_details_dto.dart' as _i3;
import 'package:moviezflutter/data/dto/movie_response_dto.dart' as _i2;
import 'package:moviezflutter/data/local/movie_db.dart' as _i4;
import 'package:moviezflutter/data/remote/movies_api_service.dart' as _i6;
import 'package:moviezflutter/domain/model/movie.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeMovieResponseDto_0 extends _i1.Fake implements _i2.MovieResponseDto {
}

class _FakeMovieDetailsDto_1 extends _i1.Fake implements _i3.MovieDetailsDto {}

/// A class which mocks [MovieDb].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDb extends _i1.Mock implements _i4.MovieDb {
  MockMovieDb() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void saveMovie(_i5.Movie? movie) =>
      super.noSuchMethod(Invocation.method(#saveMovie, [movie]),
          returnValueForMissingStub: null);
  @override
  void removeMovie(int? id) =>
      super.noSuchMethod(Invocation.method(#removeMovie, [id]),
          returnValueForMissingStub: null);
  @override
  List<_i5.Movie> getAllMovies() =>
      (super.noSuchMethod(Invocation.method(#getAllMovies, []),
          returnValue: <_i5.Movie>[]) as List<_i5.Movie>);
}

/// A class which mocks [MoviesApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesApiService extends _i1.Mock implements _i6.MoviesApiService {
  MockMoviesApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.MovieResponseDto> getMovies(int? page) =>
      (super.noSuchMethod(Invocation.method(#getMovies, [page]),
              returnValue:
                  Future<_i2.MovieResponseDto>.value(_FakeMovieResponseDto_0()))
          as _i7.Future<_i2.MovieResponseDto>);
  @override
  _i7.Future<_i2.MovieResponseDto> getTrendingMovies(int? page, String? type) =>
      (super.noSuchMethod(Invocation.method(#getTrendingMovies, [page, type]),
              returnValue:
                  Future<_i2.MovieResponseDto>.value(_FakeMovieResponseDto_0()))
          as _i7.Future<_i2.MovieResponseDto>);
  @override
  _i7.Future<_i2.MovieResponseDto> searchMovies(int? page, String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMovies, [page, query]),
              returnValue:
                  Future<_i2.MovieResponseDto>.value(_FakeMovieResponseDto_0()))
          as _i7.Future<_i2.MovieResponseDto>);
  @override
  _i7.Future<_i3.MovieDetailsDto> getMovie(int? page, dynamic id) =>
      (super.noSuchMethod(Invocation.method(#getMovie, [page, id]),
              returnValue:
                  Future<_i3.MovieDetailsDto>.value(_FakeMovieDetailsDto_1()))
          as _i7.Future<_i3.MovieDetailsDto>);
}
