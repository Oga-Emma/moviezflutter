// Mocks generated by Mockito 5.2.0 from annotations
// in moviezflutter/test/usecase/get_saved_movie_use_case_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:moviezflutter/core/error/api_request_failure.dart' as _i5;
import 'package:moviezflutter/domain/model/movie.dart' as _i8;
import 'package:moviezflutter/domain/model/movie_details.dart' as _i7;
import 'package:moviezflutter/domain/model/movies_list.dart' as _i6;
import 'package:moviezflutter/domain/repository/movies_repo.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [MoviesRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesRepo extends _i1.Mock implements _i3.MoviesRepo {
  MockMoviesRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.ApiRequestFailure, _i6.MoviesList>> getMovies(
          int? page) =>
      (super.noSuchMethod(Invocation.method(#getMovies, [page]),
              returnValue: Future<
                      _i2.Either<_i5.ApiRequestFailure, _i6.MoviesList>>.value(
                  _FakeEither_0<_i5.ApiRequestFailure, _i6.MoviesList>()))
          as _i4.Future<_i2.Either<_i5.ApiRequestFailure, _i6.MoviesList>>);
  @override
  _i4.Future<_i2.Either<_i5.ApiRequestFailure, _i6.MoviesList>> trending(
          int? page, String? type) =>
      (super.noSuchMethod(Invocation.method(#trending, [page, type]),
              returnValue: Future<
                      _i2.Either<_i5.ApiRequestFailure, _i6.MoviesList>>.value(
                  _FakeEither_0<_i5.ApiRequestFailure, _i6.MoviesList>()))
          as _i4.Future<_i2.Either<_i5.ApiRequestFailure, _i6.MoviesList>>);
  @override
  _i4.Future<_i2.Either<_i5.ApiRequestFailure, _i6.MoviesList>> searchMovie(
          int? page, String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMovie, [page, query]),
              returnValue: Future<
                      _i2.Either<_i5.ApiRequestFailure, _i6.MoviesList>>.value(
                  _FakeEither_0<_i5.ApiRequestFailure, _i6.MoviesList>()))
          as _i4.Future<_i2.Either<_i5.ApiRequestFailure, _i6.MoviesList>>);
  @override
  _i4.Future<_i2.Either<_i5.ApiRequestFailure, _i7.MovieDetails>> getMovie(
          int? page, dynamic id) =>
      (super.noSuchMethod(Invocation.method(#getMovie, [page, id]),
          returnValue: Future<
                  _i2.Either<_i5.ApiRequestFailure, _i7.MovieDetails>>.value(
              _FakeEither_0<_i5.ApiRequestFailure, _i7.MovieDetails>())) as _i4
          .Future<_i2.Either<_i5.ApiRequestFailure, _i7.MovieDetails>>);
  @override
  _i4.Future<List<_i8.Movie>> getSavedMovies() =>
      (super.noSuchMethod(Invocation.method(#getSavedMovies, []),
              returnValue: Future<List<_i8.Movie>>.value(<_i8.Movie>[]))
          as _i4.Future<List<_i8.Movie>>);
  @override
  _i4.Future<void> bookmarkMovie(_i8.Movie? movie) =>
      (super.noSuchMethod(Invocation.method(#bookmarkMovie, [movie]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteMovie(int? id) =>
      (super.noSuchMethod(Invocation.method(#deleteMovie, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}
