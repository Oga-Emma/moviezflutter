// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'domain/model/movie.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 7082999406887208635),
      name: 'Movie',
      lastPropertyId: const IdUid(13, 2680881994091649242),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8827757265701613686),
            name: 'adult',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 4175706531744357488),
            name: 'backdropPath',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9151462459586057964),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(4, 2999448598491488120),
            name: 'originalLanguage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2654225831006664416),
            name: 'overview',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4589898220619172762),
            name: 'posterPath',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 938893385195955347),
            name: 'releaseDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2409855748756838925),
            name: 'firstAired',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7203210036428127602),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5351295698766899392),
            name: 'video',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5994276372101511845),
            name: 'movieId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 8149067117958275273),
            name: 'voteAverage',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 2680881994091649242),
            name: 'voteCount',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 7082999406887208635),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [8253565077735114718],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        1833816445320588310,
        2328231649298884329,
        4302567338063711306,
        7417553401118375857,
        5989088041829164258,
        8473834027197496260,
        1002342030441148279,
        6955420175925362597,
        3176752029516212042,
        263060129910286552,
        3017946470128966539,
        4247815103813278522,
        2710642731630902472,
        8857155810691275236,
        2231510376802241731,
        7432499375032174136,
        2825824216407680336,
        8033546321364935769,
        8548093014343556032,
        1430995914576949506
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Movie: EntityDefinition<Movie>(
        model: _entities[0],
        toOneRelations: (Movie object) => [],
        toManyRelations: (Movie object) => {},
        getId: (Movie object) => object.id,
        setId: (Movie object, int id) {
          object.id = id;
        },
        objectToFB: (Movie object, fb.Builder fbb) {
          final backdropPathOffset = fbb.writeString(object.backdropPath);
          final originalLanguageOffset =
              fbb.writeString(object.originalLanguage);
          final overviewOffset = fbb.writeString(object.overview);
          final posterPathOffset = fbb.writeString(object.posterPath);
          final releaseDateOffset = fbb.writeString(object.releaseDate);
          final firstAiredOffset = fbb.writeString(object.firstAired);
          final titleOffset = fbb.writeString(object.title);
          fbb.startTable(14);
          fbb.addBool(0, object.adult);
          fbb.addOffset(1, backdropPathOffset);
          fbb.addInt64(2, object.id);
          fbb.addOffset(3, originalLanguageOffset);
          fbb.addOffset(4, overviewOffset);
          fbb.addOffset(5, posterPathOffset);
          fbb.addOffset(6, releaseDateOffset);
          fbb.addOffset(7, firstAiredOffset);
          fbb.addOffset(8, titleOffset);
          fbb.addBool(9, object.video);
          fbb.addInt64(10, object.movieId);
          fbb.addInt64(11, object.voteAverage);
          fbb.addInt64(12, object.voteCount);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Movie(
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              adult:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 4, false),
              backdropPath: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              movieId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0),
              originalLanguage: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              overview: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              posterPath: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              releaseDate: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              firstAired:
                  const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 18, ''),
              video: const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false),
              voteAverage: const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0),
              voteCount: const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Movie] entity fields to define ObjectBox queries.
class Movie_ {
  /// see [Movie.adult]
  static final adult = QueryBooleanProperty<Movie>(_entities[0].properties[0]);

  /// see [Movie.backdropPath]
  static final backdropPath =
      QueryStringProperty<Movie>(_entities[0].properties[1]);

  /// see [Movie.id]
  static final id = QueryIntegerProperty<Movie>(_entities[0].properties[2]);

  /// see [Movie.originalLanguage]
  static final originalLanguage =
      QueryStringProperty<Movie>(_entities[0].properties[3]);

  /// see [Movie.overview]
  static final overview =
      QueryStringProperty<Movie>(_entities[0].properties[4]);

  /// see [Movie.posterPath]
  static final posterPath =
      QueryStringProperty<Movie>(_entities[0].properties[5]);

  /// see [Movie.releaseDate]
  static final releaseDate =
      QueryStringProperty<Movie>(_entities[0].properties[6]);

  /// see [Movie.firstAired]
  static final firstAired =
      QueryStringProperty<Movie>(_entities[0].properties[7]);

  /// see [Movie.title]
  static final title = QueryStringProperty<Movie>(_entities[0].properties[8]);

  /// see [Movie.video]
  static final video = QueryBooleanProperty<Movie>(_entities[0].properties[9]);

  /// see [Movie.movieId]
  static final movieId =
      QueryIntegerProperty<Movie>(_entities[0].properties[10]);

  /// see [Movie.voteAverage]
  static final voteAverage =
      QueryIntegerProperty<Movie>(_entities[0].properties[11]);

  /// see [Movie.voteCount]
  static final voteCount =
      QueryIntegerProperty<Movie>(_entities[0].properties[12]);
}
